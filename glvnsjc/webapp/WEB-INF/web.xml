<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee"
  xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
  id="WebApp_ID" version="2.5">

  <display-name>glvnsjc-webapp</display-name>

  <servlet>
    <servlet-name>Faces Servlet</servlet-name>
    <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>Faces Servlet</servlet-name>
    <url-pattern>*.jsf</url-pattern>
  </servlet-mapping>

  <!-- =========================================================================== 
    Context settings                             
    =========================================================================== -->

  <!-- Trinidad has its own ViewHandler, which is a "decorating"
    view handler - for example, it needs to wrap methods like renderView()
    to perform some extra pre- and post-handling.  Facelets, on the other
    hand, is more of a true ViewHandler - it actually implements
    renderView() (yeah, it decorates too, but forget about that
    for a second).  As a result, the world is a better place if
    the Trinidad ViewHandler runs around the Facelets ViewHandler.
    But since Facelets is registered in WEB-INF/faces-config.xml,
    and Trinidad's is registered from META-INF/faces-config.xml in its
    JAR, exactly the opposite happens as per the JSF spec.
    
    Hence, the following config parameter, which Trinidad
    exposes to allow pushing a ViewHandler inside
    of ours.  FWIW, you retain the entire delegation stack - 
    just flipped around a bit - so that Facelets still decorates
    the standard ViewHandler, and therefore you've still got
    JSP support.
  -->
  <context-param>
    <param-name>org.apache.myfaces.trinidad.ALTERNATE_VIEW_HANDLER</param-name>
    <param-value>com.sun.facelets.FaceletViewHandler</param-value>
  </context-param>

  <context-param>
    <param-name>javax.faces.DEFAULT_SUFFIX</param-name>
    <param-value>.xhtml</param-value>
  </context-param>

  <context-param>
    <param-name>facelets.SKIP_COMMENTS</param-name>
    <param-value>true</param-value>
  </context-param>


  <!-- Use client-side state saving.  In Trinidad, it is an
    optimized, token-based mechanism that is almost always a
    better choice than the standard JSF server-side state saving. -->
  <context-param>
    <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
    <param-value>client</param-value>
    <!--param-value>server</param-value-->
  </context-param>

  <!-- Trinidad by default uses an optimized client-side state saving
    mechanism. To disable that, uncomment the following -->
  <!--context-param>
    <param-name>org.apache.myfaces.trinidad.CLIENT_STATE_METHOD</param-name>
    <param-value>all</param-value>
    </context-param-->

  <!-- Trinidad also supports an optimized strategy for caching some
    view state at an application level, which significantly improves
    scalability.  However, it makes it harder to develop (updates to
    pages will not be noticed until the server is restarted), and in
    some rare cases cannot be used for some pages (see Trinidad
    documentation for more information) -->
  <context-param>
    <param-name>org.apache.myfaces.trinidad.USE_APPLICATION_VIEW_CACHE</param-name>
    <param-value>false</param-value>
  </context-param>

  <!-- If this parameter is enabled, Trinidad will automatically
    check the modification date of your JSPs, and discard saved
    state when they change;  this makes development easier,
    but adds overhead that should be avoided when your application
    is deployed -->
  <context-param>
    <param-name>org.apache.myfaces.trinidad.CHECK_FILE_MODIFICATION</param-name>
    <param-value>false</param-value>
  </context-param>

  <!-- Enables Change Persistence at a session scope.  By default,
    Change Persistence is entirely disabled. The ChangeManager is
    an API, which can persist component modifications (like,
    is a showDetail or tree expanded or collapsed). For providing
    a custom Change Persistence implementation inherit from the 
    Trinidad API's ChangeManager class. As the value you have 
    to use the fullqualified class name. -->
  <context-param>
    <param-name>org.apache.myfaces.trinidad.CHANGE_PERSISTENCE</param-name>
    <param-value>session</param-value>
  </context-param>

  <context-param>
    <param-name>facelets.DEVELOPMENT</param-name>
    <param-value>true</param-value>
  </context-param>

  <context-param>
    <param-name>facelets.LIBRARIES</param-name>
    <param-value>
      /WEB-INF/taglibs/acegijsf.taglib.xml;

      /WEB-INF/taglibs/corejsf-validator.taglib.xml;

      /WEB-INF/taglibs/tomahawk.taglib.xml
    </param-value>
  </context-param>

  <!-- =========================================================================== 
    Filter settings                             
    =========================================================================== -->
  <filter>
    <filter-name>securityFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
      <param-name>targetBeanName</param-name>
      <param-value>springSecurityFilterChain</param-value>
    </init-param>
  </filter>

  <filter>
    <filter-name>trinidad</filter-name>
    <filter-class>org.apache.myfaces.trinidad.webapp.TrinidadFilter</filter-class>
  </filter>

  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>

  <filter-mapping>
    <filter-name>trinidad</filter-name>
    <servlet-name>Faces Servlet</servlet-name>
  </filter-mapping>

  <!-- resource loader servlet -->

  <servlet>
    <servlet-name>resources</servlet-name>
    <servlet-class>org.apache.myfaces.trinidad.webapp.ResourceServlet</servlet-class>
  </servlet>

  <!-- =========================================================================== 
    Spring Configuration                             
    =========================================================================== -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>

      classpath:org/glvnsjc/applicationContext-persistence.xml,

      classpath:org/glvnsjc/applicationContext-datasource.xml,

      classpath:org/glvnsjc/applicationContext-resources.xml,

      classpath:org/glvnsjc/applicationContext-jpa.xml,

      classpath:org/glvnsjc/applicationContext-orchestra.xml,

      classpath:org/glvnsjc/applicationContext-dao.xml,

      classpath:org/glvnsjc/applicationContext-security.xml,

      classpath:org/glvnsjc/applicationContext-glvnsjc-web.xml,

    </param-value>
  </context-param>

  <!-- =========================================================================== 
    JSF to Spring bridge Configuration                             
    =========================================================================== -->

  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!-- ======================================================================== -->
  <!-- Spring logger                                                            -->
  <!-- ======================================================================== -->

  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>

  <!--
    - Key of the system property that should specify the root directory of this
    - web app. Applied by WebAppRootListener or Log4jConfigListener.
    - used in log4j.properties
  -->
  <context-param>
    <param-name>webAppRootKey</param-name>
    <param-value>glvnsjc.webroot</param-value>
  </context-param>

  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>/WEB-INF/log4j.properties</param-value>
  </context-param>

  <!--============================================================================-->
  <!-- Orchestra Configuration                                                    -->
  <!--============================================================================-->
  <listener>
    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
  </listener>

  <listener>
    <listener-class>
      org.apache.myfaces.orchestra.conversation.servlet.ConversationManagerSessionListener
    </listener-class>
  </listener>


  <!--============================================================================-->
  <!-- Welcome Configuration                                                      -->
  <!--============================================================================-->
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>index.html</welcome-file>
  </welcome-file-list>
  <login-config>
    <auth-method>BASIC</auth-method>
  </login-config>

  <!--============================================================================-->
  <!-- HTTP Error Handling                                                        -->
  <!--============================================================================-->

  <error-page>
    <error-code>500</error-code>
    <location>/error.jsp</location>
  </error-page>
  <error-page>
    <error-code>400</error-code>
    <location>/index.jsp</location>
  </error-page>
  <error-page>
    <error-code>403</error-code>
    <location>/403.jsp</location>
  </error-page>
  <error-page>
    <error-code>404</error-code>
    <location>/404.jsp</location>
  </error-page>

</web-app>
